<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - rust</title>
    <link href="https://blog.mcarr.one/tags/rust/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.mcarr.one"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-09-23T00:00:00+00:00</updated>
    <id>https://blog.mcarr.one/tags/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>Google Summer of Code Final Writeup</title>
        <published>2024-09-23T00:00:00+00:00</published>
        <updated>2024-09-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/gsoc-final/" type="text/html"/>
        <id>https://blog.mcarr.one/gsoc-final/</id>
        
        <content type="html">&lt;p&gt;Summer is officially over now, and now so is my &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;&quot;&gt;Google Summer of Code project&lt;&#x2F;a&gt; for this year.  This was a really great experience for me, and I&#x27;m super grateful to have had this opportunity.  I had the great help of being mentored by the maintainer of the project &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;&quot;&gt;Predrag Gruevski&lt;&#x2F;a&gt;, which I couldn&#x27;t have asked for a better mentor for this.  In this blog post, I&#x27;ll talk about the work I did, reflections on my experience, and what the future looks like:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-work&quot;&gt;the work&lt;&#x2F;h2&gt;
&lt;p&gt;The title of my GSoC project that I wrote at the beginning is &amp;quot;adding lint-level configuration to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.&amp;quot;  This means adding the ability for users to configure each individual check of the semantic versioning linter &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#project-info&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; Adding this configuration granularity will let many more Rust crates adopt &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to automatically help prevent breaking the semantic versioning guarantees, which helps the whole Rust ecosystem make more fearless upgrades according to SemVer.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overrides&quot;&gt;overrides&lt;&#x2F;h3&gt;
&lt;p&gt;To configure each of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s 90+ lints, both by lint level&#x2F;severity and required SemVer update, I first added a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;a8083aabf4ae46167b435c7f4aba3425fbf463c5&quot;&gt;default lint level field (#787)&lt;&#x2F;a&gt; to each lint, then added a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;393691c79dc9a70cdc557fd4b3b24e988b0ec307&quot;&gt;new API (#788)&lt;&#x2F;a&gt; to configure overriding each lint&#x27;s fields.  I had to design a system that supported multiple levels of precedence, with the ability to configure lint level, required update, or both for a given lint at each of these precedence levels, so it took some careful design and adding plenty of unit tests.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-lints-table&quot;&gt;the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table&lt;&#x2F;h3&gt;
&lt;p&gt;After posting my initial blog post, the feedback I received from community members was very helpful.  Initially, I had planned to start exposing the configuration interface as a series of CLI flags (like &lt;code&gt;rustc&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;--warn &amp;lt;name&amp;gt;&lt;&#x2F;code&gt;).  In this discussion with my mentor and community members like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;epage&quot;&gt;epage&lt;&#x2F;a&gt;, it started to look like a better idea to work on the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table in the Cargo manifest first, and reevaluate the need for CLI flags later on.&lt;&#x2F;p&gt;
&lt;p&gt;After this, I implemented the logic to read a table similar to the Cargo &lt;code&gt;[lints]&lt;&#x2F;code&gt; table from manifests in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;f8f89ecfa7f1e60b343e7b07beaf415393f244f8&quot;&gt;#799&lt;&#x2F;a&gt;, using the &lt;code&gt;[package.metadata.cargo-semver-checks.lints]&lt;&#x2F;code&gt; (it&#x27;s currently not valid for tools like &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to use the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table directly), and in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;4e0b92629a96413f875035d6d537a8409a90baf1&quot;&gt;#800&lt;&#x2F;a&gt;, I implemented the logic to use the configured required update, and added tests for the many different interactions, especially with both workspace and package configuration.&lt;&#x2F;p&gt;
&lt;p&gt;After some minor fixes in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;ee0ce6df438aee7be50fe67041481a20c4257d3b&quot;&gt;#804&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;4586521f8976947ea45a7e40c2218cbf7c051c9a&quot;&gt;#806&lt;&#x2F;a&gt;, I finished the logic for using the configured lint level in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;fe1830f2e550bf2d82ccf1b6705571da12a74fbc&quot;&gt;#805&lt;&#x2F;a&gt;.  THis was much more design-intensive than using the configured required update, because this was also introducing the concept of warning-level checks to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, and I spent a lot of time with my mentor designing how a warning should look like in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s interface, and how warnings should interact with errors.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;137790a595ea8ae0166e5a0b39ac1f60ee23b044&quot;&gt;#808&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;a72aa1388af5e3766bc93bd03de43260ed8f048e&quot;&gt;#809&lt;&#x2F;a&gt; I added some future-proofing tests and comments to help with maintainability.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compatibility-with-cargo&quot;&gt;compatibility with &lt;code&gt;cargo&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A goal of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as a project is to be as compatible with &lt;code&gt;cargo&lt;&#x2F;code&gt; as possible and eventually be merged with the tool.  After posting another update on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s new configurability, part of the feedback to this was that the current lints table would not be quite compatible with cargo&#x27;s.  In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;43678899bcc9f748101e9226fb4995a54555d463&quot;&gt;#811&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;a4f745f94dbf23ed9cf13bfe72b9cad875de4d3c&quot;&gt;#812&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;363754a3811d3fdf0ce5ac115723ea2ecf74558e&quot;&gt;#813&lt;&#x2F;a&gt;, I added the functionality to mimic &lt;code&gt;cargo&lt;&#x2F;code&gt; and only read workspace configuration if a key is explicitly set in the package, and added tests (including making sure that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; denies the &lt;code&gt;lints.workspace = false&lt;&#x2F;code&gt; key, which is insidiously ian invalid state).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documenting&quot;&gt;documenting&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, the initial core configuration was ready, so I added a section to the README that was a guide on how to use this new feature in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;319943604b02fa814def31163a418326ea7cb460&quot;&gt;#826&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;c11ec6d02b4cea17209be9239ff8c1bb6ff025ad&quot;&gt;#829&lt;&#x2F;a&gt;.  I wrote a lot of documentation this summer, both developer-facing and user-facing, and it&#x27;s one of the things I&#x27;m proud of.  To me, documentation is often the first impression of a project, and it can make or break a user&#x27;s experience, so polishing it is super important.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-detour&quot;&gt;a detour?&lt;&#x2F;h3&gt;
&lt;p&gt;Here in the project, there was kind of a lull, and I was working on polishing tests and documentation.  However, one thing I was noticing was that it was kind of hard and involved to write a full integration test case.  My mentor suggested that I try to improve the testing infrastructure for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, and I thought that was a great idea.  In &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;329c42f1cfadba23454d881273f63df40a6291bc&quot;&gt;#846&lt;&#x2F;a&gt;, I added the foundation to be able to write integration tests using the &lt;code&gt;insta&lt;&#x2F;code&gt; framework.  I also spent some time benchmarking to figure out what kind of test (i.e., &lt;code&gt;lib test&lt;&#x2F;code&gt;, &lt;code&gt;bin test&lt;&#x2F;code&gt;, or, confusingly, &lt;code&gt;test&lt;&#x2F;code&gt; binary) would be most helpful to access the right parts of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to test while having the fastest possible compile times for better iteration and design.  Here, I also wrote a lot of documentation for future contributors to have the best experience when writing new tests.&lt;&#x2F;p&gt;
&lt;p&gt;After adding this test infrastructure, I wrote some tests that pinned down &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s behavior for different edge cases, which documented this behavior, prevented any unwanted regressions, and would be easy to change if we decided in the future we wanted this behavior to be different, in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;0ed482776ba158df55ff3651aaa95019249e04b4&quot;&gt;#847&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;62a3c75215399f9c5d853b7dad24147af6a01f42&quot;&gt;#859&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;c53ff88cd6d6d4e0631c4405d5f8c0da562d8218&quot;&gt;#866&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;6e5d78acf899dbb232060cfc525b7444a3d2f7e5&quot;&gt;#882&lt;&#x2F;a&gt;.  In writing these tests, I found the opportunity to polish in fix parts of the test infrastructure, like in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;eb5c87dac9ce2c51d054272d6ba902cc4121bc3f&quot;&gt;#865&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;8898271377a3931925ba38518b1995c96107795f&quot;&gt;#867&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;5b35f9f3d66ea76a6dd87fa348fabd12224a30c3&quot;&gt;#881&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;c2dfe22505975f3092820e4464ccb2774e87928c&quot;&gt;#883&lt;&#x2F;a&gt;, as well as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;7b7a518150b7ff2701c40a61829896a2cd05898b&quot;&gt;#913&lt;&#x2F;a&gt; later on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-features&quot;&gt;new features!&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;827&quot;&gt;user demand&lt;&#x2F;a&gt; for CLI-configurable lints when there was already another avenue to configure them was not that strong, so it didn&#x27;t seem like the best way forward to continue with my original proposed idea of adding CLI flags here.  The project started to go off the rails a little, but in a very good way.  Predrag suggested that I work on a new feature to generate witness programs, which are buildable examples of the downstream breakage of agiven breaking change, which prove that a SemVer guarantee would be broken with this change.  As a fan of testing and correctness, I got to work on this feature. &lt;&#x2F;p&gt;
&lt;p&gt;Adding witnesses is a big feature, so we wanted the ability to mark a feature as unstable during its development.  Following the design of other tools in the Rust ecosystem like Cargo, I worked on the ability to have unstable feature flags and CLI options in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;eb0c7713c61a3bc9de5a872e3327eaa2e59c462e&quot;&gt;#896&lt;&#x2F;a&gt;, and I added some various consistency improvements in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;a39dc2b46bb52aadfb02d067ea3904719ec89fe8&quot;&gt;#897&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;cf060a624fbac0ffc6332319d9b7c560330a8e83&quot;&gt;#899&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;3352f525554a825745465ba02f41af2200c37a73&quot;&gt;#919&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I added the start of the witness feature in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;a056a5a743370612109ea32a797859a2fea8a210&quot;&gt;#893&lt;&#x2F;a&gt;, and improved the contributor experience and documentation for adding new witnesses in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;1bd25e6348a528871702af724edfbfc93e08130&quot;&gt;#935&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;0f67fc4d92c310cc9ff3ab617ac36d058fb8aadc&quot;&gt;#933&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Work on witnesses is currently unfinished ongoing, and this is one of the things I will keep working on as GSoC finishes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lint-groups&quot;&gt;lint groups&lt;&#x2F;h3&gt;
&lt;p&gt;One of the stretch goals in my original project was adding configurable lint groups in addition to configuring individual lints, and this feature was seeming more useful than adding CLI configuration flags.  I worked on a &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;&quot;&gt;design draft&lt;&#x2F;a&gt;, focusing on how a user would use these features.  I started the work by reading the &lt;code&gt;priority&lt;&#x2F;code&gt; field to the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;commit&#x2F;68ee754452a74bc987bc98fdf29443efffd08edf&quot;&gt;#932&lt;&#x2F;a&gt; to avoid configuration conflicts by defining precedence, and I have drafts of the logic to have lint group configuration, so expect to see lint groups in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; pretty soon.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;...and that&#x27;s it.  I merged 40 commits during GSoC which feels like a lot, but also not a lot, because each of those commits is squashed and many of them have several parts&#x2F;squashed commits and (quite in-depth) discussions in the pull request, so the commit history does not tell the full story.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;thanks&lt;&#x2F;h2&gt;
&lt;p&gt;About those discussions: I could not get this far in the blog post without recognizing my mentor, Predrag Gruevski. His attention to detail (down to the number of spaces after a period), thoughtfulness, kindness, and careful consideration of every line of code I merged into &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; (and the so many that I didn&#x27;t) encouraged me to design, implement, and think about the code I submitted from different perspectives and as part of a complex system.  This was so helpful in shaping the way I think about designing features and contributing to open source, and I can&#x27;t thank him enough.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, the community around the Rust GSoC program and the Rust project in general was a super great environment to be a part of.  Special thanks to the GSoC admin Jakub Beránek, maintainers and contributors like Ed Page and Scott Schafer, everyone else working on a Rust GSoC project this summer - it was such a great experience to see updates and how everyone&#x27;s project progressed over the summer, and the whole open source community.  I can&#x27;t overstate what a welcoming experience this has been, and I&#x27;m definitely going to keep being a part of the community in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;and-an-apology&quot;&gt;and an apology&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;784&quot;&gt;The first PR&lt;&#x2F;a&gt; I opened as a part of my GSoC project was... a little overzealous.  It changed hundreds of lines of code, affected multiple different systems, added multiple different features, and was overall a huge set of changes to review.  My mentor (very nicely and diplomatically) suggested I might break up the changes into smaller PRs.  This was a great learning experience for me to reflect on my git hygiene and how to make my changes easier and clearer to review, which is something I worked on and developed over the summer.  I&#x27;m grateful to have had this opportunity to grow, and I do apologize for this first pull request ;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;what&#x27;s next&lt;&#x2F;h2&gt;
&lt;p&gt;This is certainly not the end of my work on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.  Right now, I have three projects I&#x27;m working on: adding the functionality for lint groups, keeping working on adding witnesses, and working on a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;939&quot;&gt;refactor of the command line output&lt;&#x2F;a&gt; of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.  With the new features, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; outgrew its old interface a little bit, and we&#x27;re working on exploring making it more consistent with the output of &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;clippy&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I&#x27;m going to keep working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;suaviloquence&#x2F;scrapelect&#x2F;&quot;&gt;some of my own projects&lt;&#x2F;a&gt;, and I&#x27;m also planning on contributing to some other Rust open-source projects now that GSoC is over.  I&#x27;d like to keep posting about my journey on this blog, and I made a &lt;a href=&quot;https:&#x2F;&#x2F;fosstodon.org&#x2F;@m_carr&quot;&gt;Mastodon&lt;&#x2F;a&gt; for interacting with the open-source community.  (and I&#x27;m always looking for cool people to follow!)&lt;&#x2F;p&gt;
&lt;p&gt;Thanks again to everyone who made this summer possible!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;project-info&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;For more information about the project, I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;&quot;&gt;blog post&lt;&#x2F;a&gt; describing the problem I set out to solve this summer.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Design Draft for `cargo-semver-checks` lint groups and CLI</title>
        <published>2024-08-26T00:00:00+00:00</published>
        <updated>2024-08-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/lint-groups-cli-draft/" type="text/html"/>
        <id>https://blog.mcarr.one/lint-groups-cli-draft/</id>
        
        <content type="html">&lt;p&gt;After implementing the core &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-update-1&#x2F;&quot;&gt;manifest lint-level configuration&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, one of the next steps is adding some of the &amp;quot;nice to have&amp;quot;extra features that will make it much easier to use and configure &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in projects&#x27; workflows.&lt;&#x2F;p&gt;
&lt;p&gt;Two of these features are &lt;strong&gt;CLI config&lt;&#x2F;strong&gt; and &lt;strong&gt;lint groups&lt;&#x2F;strong&gt;, and, because they are closely related, it can be helpful to think about how they will interact and design them in parallel (even though they might not be implemented at the same time).  Here are some of my considerations for what these features would look like in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lint-groups&quot;&gt;lint groups&lt;&#x2F;h2&gt;
&lt;p&gt;A lint group, as the name might suggest, is a group of lints that share a certain property, to be configured all at once.  For context, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; consists of many precise lints, such as &lt;code&gt;union_must_use_added&lt;&#x2F;code&gt; and &lt;code&gt;module_missing&lt;&#x2F;code&gt;, that each target one specific instance of a semantic versioning guarantee being broken.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes, though, it makes more sense to want to express something like &amp;quot;let&#x27;s make all &lt;code&gt;#[must_use]&lt;&#x2F;code&gt; lints be warnings.&amp;quot;  Currently, this can only be expressed with the following &lt;code&gt;lints&lt;&#x2F;code&gt; table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enum_must_use_added &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_must_use_added &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inherent_method_must_use_added &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_must_use_added &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The granularity that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; provides is super helpful, both for writing simple, testable lints and being able to control such precise behaviors, but sometimes, a project just wants to express something like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;must_use_added &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This, unlike the current state, doesn&#x27;t require the project to research and know about the internals of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; and how it divides this semantic group into individual lints, and it is future-proof against additional lints of this category being added.  For example, the &lt;code&gt;union_must_use_added&lt;&#x2F;code&gt; lint was written around &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;pull&#x2F;845&quot;&gt;two weeks ago&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, there are scenarios where it would be really helpful to be able to configure groups of similar lints.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-many-groups&quot;&gt;how many groups?&lt;&#x2F;h3&gt;
&lt;p&gt;One question that comes up is how many lint groups can a single lint belong to.  It could be one, so every lint group is disjoint from each other, or a lint could belong to zero-to-many lint groups.  The second option could be more expressive, as a lint could be part  of multiple semantic categories.  However, this would add a lot of complexity to the implementation.  Additionally, looking at prior art like &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;stable&#x2F;index.html#?groups=cargo,complexity,correctness,deprecated,nursery,pedantic,perf,restriction,style,suspicious&quot;&gt;clippy&lt;&#x2F;a&gt;, there is precedent for having one lint belong to a single lint group.  That way seems like the best path forward for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, but this can always be re-evaluated later on if we end up needing the addional expressivity of multiple lint groups per lint.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;two-modes-of-configuration&quot;&gt;two modes of configuration&lt;&#x2F;h3&gt;
&lt;p&gt;As a reminder, each individual lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can be configured in two ways: the lint level (&lt;code&gt;allow&lt;&#x2F;code&gt;, &lt;code&gt;warn&lt;&#x2F;code&gt;, or &lt;code&gt;deny&lt;&#x2F;code&gt;), or the required semver bump when the lint finds breakage (&lt;code&gt;minor&lt;&#x2F;code&gt; or &lt;code&gt;major&lt;&#x2F;code&gt;).  Like lints, lint groups will be able to configured in these two ways, with the same syntax for specifying these as individual lints. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuration-precedence&quot;&gt;configuration precedence&lt;&#x2F;h3&gt;
&lt;p&gt;What happens when a lint group is configured at the same time as a lint belonging to that group? How do they interact? In the cargo &lt;code&gt;[lints]&lt;&#x2F;code&gt; table, which &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; currently emulates, each configuration entry has a member &lt;code&gt;priority&lt;&#x2F;code&gt; (set to 0 if omitted).  Lower numbers (which can be negative) have lower priority, and if a configuration entry for a lint has a higher priority, it will override the lower priority.  Since &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; aims to be compatible with the &lt;code&gt;[cargo]&lt;&#x2F;code&gt; lint table, it makes sense to copy this behavior, although the edge cases (e.g., if a lint group containing a lint and that lint are configured at the same level) can become complex, so this will need testing for these behaviors.  Currently, there is a clippy warning &lt;code&gt;lint_groups_priority&lt;&#x2F;code&gt; for this specific case, so &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; could also produce warnings in configurations like these.  Note that the order of the fields in the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table does not impact the lint sorting and precednece.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, as discussed below, priority will also have to be a consideration when specifying configuration through CLI flags.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dynamic-groups&quot;&gt;dynamic groups&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;code&gt;rustc&lt;&#x2F;code&gt; linters, there are also dynamic groups, like &lt;code&gt;all&lt;&#x2F;code&gt; and &lt;code&gt;warnings&lt;&#x2F;code&gt; which allow the user to configure all defined lints or all lints currently configured to be warnings (e.g., to &lt;code&gt;deny&lt;&#x2F;code&gt; all warnings as hard errors).  These could be useful for expressiveness to quickly enable all lints&#x2F;warning checks, but this does not seem like a crucial feature for the initial implementation.  Eventually, we could have dynamic lint groups for all currently-configured &lt;code&gt;major&lt;&#x2F;code&gt; and &lt;code&gt;minor&lt;&#x2F;code&gt;-level lints as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;grouping-the-lints&quot;&gt;grouping the lints&lt;&#x2F;h3&gt;
&lt;p&gt;Here is a rough grouping of the currently-present lints in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;.  This idea skews more specific (as opposed to e.g., clippy&#x27;s &lt;code&gt;correctness&lt;&#x2F;code&gt;), but this part I would love feedback on.  Lists of lints by group in the appendix, linked for each group.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#must-use-added&quot;&gt;&lt;code&gt;must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - all the different instances of adding &lt;code&gt;#[must_use]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#item-missing&quot;&gt;&lt;code&gt;item_missing&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - when a public item is removed &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#abi-changed&quot;&gt;&lt;code&gt;abi_changed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - when the &lt;code&gt;repr&lt;&#x2F;code&gt; or ABI of a public item changes &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#non-constructible&quot;&gt;&lt;code&gt;non_constructible&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - when a struct or enum variant is no longer constructible&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#impl-removed&quot;&gt;&lt;code&gt;impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - when a struct&#x2F;enum&#x2F;union no longer implements a trait &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#doc-hidden-added&quot;&gt;&lt;code&gt;doc_hidden_added&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - when an item becomes &lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt; and is removed from the public API&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#safety-changed&quot;&gt;&lt;code&gt;safety_changed&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - the safety of a function&#x2F;item is changed in a way that is breaking&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;lint-groups-cli-draft&#x2F;#guarantee-broken&quot;&gt;&lt;code&gt;guarantee_broken&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; - a sort of more general category of lint changes that can cause downstream crates to be broken (sometimes subtly) by removing guarantees of a previous API.  This is more general, and could potentially be broken up into smaller groups.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This would be helpful in situations above.  Clippy&#x27;s lint groups are more general categories like &lt;code&gt;restriction&lt;&#x2F;code&gt;, &lt;code&gt;correctness&lt;&#x2F;code&gt;, etc., which could also be a direction to go in.  For example, there could be some warn-by-default lints that would fit nicely in a &lt;code&gt;suspicious&lt;&#x2F;code&gt; group.  This is where it could be helpful to have the additional expressiveness of having multiple lint groups for a single lint, but it seems possible to have a creative mix of more targeted&#x2F;more general categories with only one group per lint, avoiding the additional complexity of many groups per lint.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cli-config&quot;&gt;CLI config&lt;&#x2F;h2&gt;
&lt;p&gt;Another feature is being able to configure lints and lint groups using command-line flags.  This is a more complicated feature, and we&#x27;re &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;issues&#x2F;827&quot;&gt;tracking user demand&lt;&#x2F;a&gt; to see if it&#x27;s desired to add.  It&#x27;s helpful, though to reason about the interactions a potential command-line configuration interface would have with lint groups before either feature begins to be implementated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prior-art&quot;&gt;prior art&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;-based linting tools (such as clippy) have CLI syntax like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;--allow (-A) |
&lt;&#x2F;span&gt;&lt;span&gt;--warn (-W) |
&lt;&#x2F;span&gt;&lt;span&gt;--deny (-D) |
&lt;&#x2F;span&gt;&lt;span&gt;--forbid (-F) |
&lt;&#x2F;span&gt;&lt;span&gt;--force-warn 
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;lint_or_group_name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;for example, &lt;code&gt;cargo clippy -- --deny clippy::undocumented-unsafe-blocks --allow unsafe-code&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; uses these names for lint levels in the current Cargo.toml manifest configuration (but doesn&#x27;t currently support &lt;code&gt;forbid&lt;&#x2F;code&gt; or &lt;code&gt;force-warn&lt;&#x2F;code&gt;, and it could help for interoperability in the Rust tooling ecosystem to use similar CLI flags.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuring-version&quot;&gt;configuring version&lt;&#x2F;h3&gt;
&lt;p&gt;However, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; also allows another aspect of each lint to be configured: it&#x27;s required semantic versioning bump when the lint occurs.  A CLI suite would need to expose this configuration avenue as well.  For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo semver-checks -- --major must_use_added --minor function_missing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s tempting to add a shorthand for configuring lint level and required semver bump for the same lint&#x2F;group at once, but this seems to me like a lot of additional complexity for no real gain in expressiveness.&lt;&#x2F;p&gt;
&lt;p&gt;Just like with manifest configuration, if a lint&#x2F;group is configured for one aspect, the other aspect remains the default (or previously-configured value)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;precedence&quot;&gt;precedence&lt;&#x2F;h3&gt;
&lt;p&gt;When CLI and manifest both configure a lint or lint group, the CLI should take precedence.  This is also the case with e.g. clippy flags and the &lt;code&gt;[lints.clippy]&lt;&#x2F;code&gt; Cargo.toml table.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, command-line flags are provided in a deterministic sequence, so we don&#x27;t need a &lt;code&gt;priority&lt;&#x2F;code&gt; key as we did in the manifest table: we just define (like other linters) the later flags taking precedence over the former flags, regardless of whether they are in lint groups or not.  For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo semver-checks -- --allow must_use_added --deny enum_must_use_added
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo semver-checks -- --deny enum_must_use_added --allow must_use_added 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first invocation would require a version bump if &lt;code&gt;#[must_use]&lt;&#x2F;code&gt; was added to a pub enum, because the &lt;code&gt;enum_must_use_added&lt;&#x2F;code&gt; flag took precedence over the lint group.  In the second example, however, it would be the opposite, because the blanket &lt;code&gt;allow&lt;&#x2F;code&gt; came after the targeted &lt;code&gt;deny&lt;&#x2F;code&gt; and thus takes precedence.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to note that these precedence rules apply to each individual property of the lint (that is, version and lint level), meaning if we had&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo semver-checks -- --major must_use_added --warn enum_must_use_added
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the &lt;code&gt;enum_must_use_added&lt;&#x2F;code&gt; lint would be major-level and a warning (and other &lt;code&gt;must_use_added&lt;&#x2F;code&gt; lintsallow would be major-level and an error).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-less-nuclear-option&quot;&gt;a less-nuclear option&lt;&#x2F;h3&gt;
&lt;p&gt;The problem that command-line flags solve is being able to configure lints&#x2F;lint groups in an environment where the Cargo.toml manifest is not available to use for this purpose.  This could be in CI, using precomputed Rustdoc JSON files, etc., where &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; does not have access to the Cargo.toml manifest where lints would be configured.&lt;&#x2F;p&gt;
&lt;p&gt;One alternative solution that avoids some of this complexity is adding a &lt;code&gt;--lint-config&lt;&#x2F;code&gt; flag that lets the user provide a path to a file that contains the lint configuration table.  With this, we only have to reason about precedence rules and edge cases in one format (the manifest configuration table), but there is a way to configure lints in environments where it&#x27;s not currently possible.&lt;&#x2F;p&gt;
&lt;p&gt;Like command-line flags, any items in this table would take precedence over items in the package or workspace &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.  One disadvantage of this over command-line flags is that it does require another file to be created, managed, checked into source control, etc., but it does solve the problem that CLI flags also do while using existing infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d love to hear any feedback at this stage about lint groups, CLI config, or any of the problems, solutions, and implementation details proposed in this post.  You can find my sketch of the grouped current lints below in the appendix.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix-existing-lint-groups&quot;&gt;appendix: existing lint groups&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;abi-changed&quot;&gt;&lt;code&gt;abi_changed&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enum_repr_int_changed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_repr_int_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_repr_transparent_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exported_function_changed_abi&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_abi_no_longer_unwind&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_changed_abi&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_export_name_changed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repr_c_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repr_packed_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repr_packed_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;non-constructible&quot;&gt;&lt;code&gt;non_constructible&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constructible_struct_adds_field&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;constructible_struct_adds_private_field&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;constructible_struct_changed_type&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_struct_variant_field_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_tuple_variant_field_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_marked_non_exhaustive&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_with_pub_fields_changed_type&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tuple_struct_to_plain_struct&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;unit_struct_changed_kind&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;variant_marked_non_exhaustive&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;doc-hidden-added&quot;&gt;&lt;code&gt;doc_hidden_added&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enum_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_struct_variant_field_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_tuple_variant_field_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_associated_const_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_method_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pub_module_level_const_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pub_static_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_pub_field_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_associated_const_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_associated_type_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_method_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;union_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;union_pub_field_now_doc_hidden&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;guarantee-broken&quot;&gt;&lt;code&gt;guarantee_broken&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enum_marked_non_exhaustive&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_variant_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_const_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_parameter_count_changed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;method_parameter_count_changed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pub_static_mut_now_immutable&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_newly_sealed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_no_longer_object_safe&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;type_marked_deprecated&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;impl-removed&quot;&gt;&lt;code&gt;impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto_trait_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;derive_trait_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sized_impl_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;item-missing&quot;&gt;&lt;code&gt;item_missing&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enum_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_struct_variant_field_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_tuple_variant_field_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_associated_pub_const_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_method_const_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_method_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;module_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pub_module_level_const_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pub_static_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_pub_field_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_repr_transparent_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_method_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_removed_associated_constant&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_removed_associated_type&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_removed_supertrait&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;union_field_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;union_missing&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enum_variant_missing&lt;&#x2F;code&gt; missin&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;must-use-added&quot;&gt;&lt;code&gt;must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enum_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;function_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_method_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;struct_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;union_must_use_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;safety-changed&quot;&gt;&lt;code&gt;safety_changed&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function_unsafe_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inherent_method_unsafe_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_method_unsafe_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_method_unsafe_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_unsafe_added&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;trait_unsafe_removed&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>cargo-semver-checks lint configuration guide</title>
        <published>2024-07-18T00:00:00+00:00</published>
        <updated>2024-07-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/csc-config-guide/" type="text/html"/>
        <id>https://blog.mcarr.one/csc-config-guide/</id>
        
        <content type="html">&lt;p&gt;Recently, I&#x27;ve added functionality to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to control both the lint level and required semver update for each check.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definitions&quot;&gt;definitions&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;check&#x2F;lint&lt;&#x2F;strong&gt; - &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; runs many checks between versions of a crate&#x27;s public API, which each check for one specific semver-breaking behavior.  For example, the &lt;code&gt;function_missing&lt;&#x2F;code&gt; lint is triggered when a function in the crate&#x27;s public API is removed in a new version. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;lint level&lt;&#x2F;strong&gt; - For each of these checks, it is now possible to configure the level of severity for when this check occurs.  &lt;code&gt;deny&lt;&#x2F;code&gt; means it is a hard error when the check finds breaking behavior, which will require a version bump to resolve.  &lt;code&gt;warn&lt;&#x2F;code&gt; still runs the check and reports findings, but it is only a warning if it triggers and does not require (but it does suggest) a version bump.  &lt;code&gt;allow&lt;&#x2F;code&gt; means that the breaking behavior in this check is allowed in the code, so the check doesn&#x27;t need to be run.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;required (semver) update&lt;&#x2F;strong&gt; - what version bump this check should require (for &lt;code&gt;deny&lt;&#x2F;code&gt;-level) or suggest (for &lt;code&gt;warn&lt;&#x2F;code&gt;) when the check is triggered.  For example, &lt;code&gt;function_missing&lt;&#x2F;code&gt; is &lt;code&gt;major&lt;&#x2F;code&gt; by default, so if a public function is removed between versions, the version needs a major version bump (e.g., 1.2.3 to 2.0.0 or 0.5.2 to 0.6.0).  This can be configured to &lt;code&gt;major&lt;&#x2F;code&gt; or &lt;code&gt;minor&lt;&#x2F;code&gt; (1.2.3 to 1.3.0 or 0.5.2 to 0.5.3).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;configuring-checks&quot;&gt;configuring checks&lt;&#x2F;h2&gt;
&lt;p&gt;To configure the level and&#x2F;or required update for a check, first find its id.  This will be in &lt;code&gt;snake_case&lt;&#x2F;code&gt; and is reported on error&#x2F;warning or found as the file name in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;tree&#x2F;main&#x2F;src&#x2F;lints&quot;&gt;lints folder&lt;&#x2F;a&gt;.  Let&#x27;s use &lt;code&gt;function_missing&lt;&#x2F;code&gt; as an example.&lt;&#x2F;p&gt;
&lt;p&gt;Then, determine what the new lint level and&#x2F;or required version update should be.  For our example, let&#x27;s set the level to &lt;code&gt;warn&lt;&#x2F;code&gt; and the required update to &lt;code&gt;minor&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest for the crate we&#x27;re checking, add the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; lints table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To configure other lints, just add them as additional entries to that table.  Note that it is not required to configure &lt;em&gt;both&lt;&#x2F;em&gt; lint level and required version update, and you can use the shorthand &lt;code&gt;lint_id = &amp;quot;level&amp;quot;&lt;&#x2F;code&gt; to configure just the lint level:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_now_doc_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# shorthand to set just lint level to `allow`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enum_variant_added &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# leaves required-update as the default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_changed_abi &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# leaves level as default
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This table should be placed in the current&#x2F;new &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest, not the baseline&#x2F;old manifest.  (this defaults to &lt;code&gt;.&#x2F;Cargo.toml&lt;&#x2F;code&gt; in the directory that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; was invoked on, and can be configured to a different path with the &lt;code&gt;--manifest-path&lt;&#x2F;code&gt; CLI option).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuring-a-workspace&quot;&gt;configuring a workspace&lt;&#x2F;h2&gt;
&lt;p&gt;It may also be helpful to configure these checks at the workspace level for multiple different crates in the same Cargo workspace. To do this, in the workspace root &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, add a similar configuration table:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that it is &lt;code&gt;workspace.metadata&lt;&#x2F;code&gt; and not &lt;code&gt;package.metadata&lt;&#x2F;code&gt;.  Then, to opt-in to these for each package that is being semver-checked, one of these keys to the &lt;em&gt;package&lt;&#x2F;em&gt; Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Either of these is acceptable to indicate to read the &lt;code&gt;[workspace.metadata.cargo-semver-checks.lints]&lt;&#x2F;code&gt; table for this package.  Using the &lt;code&gt;lints.workspace&lt;&#x2F;code&gt; key can be helpful to indicate this behavior for other linters (e.g., cargo and clippy), but will cause a cargo error if it is set and there is no &lt;code&gt;[workspace.lints]&lt;&#x2F;code&gt; table in the workspace Cargo.toml.  To solve this, we added the &lt;code&gt;package.metadata.cargo-semver-checks.lints.workspace&lt;&#x2F;code&gt; key for compatibility. Note that setting &lt;code&gt;workspace = false&lt;&#x2F;code&gt; is not valid configuration for either of these keys.  To indicate not to read workspace configuration for a crate, simply omit both keys entirely from the package&#x27;s Cargo.toml.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;overriding-workspace-configuration&quot;&gt;overriding workspace configuration&lt;&#x2F;h3&gt;
&lt;p&gt;When &lt;code&gt;workspace = true&lt;&#x2F;code&gt; is set, it is possible to override individual lint configuration lines in a package.  For example, if we have in the &lt;em&gt;workspace&lt;&#x2F;em&gt; Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[workspace.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_now_doc_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and in the &lt;em&gt;package&lt;&#x2F;em&gt; Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;workspace &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_now_doc_hidden &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;major&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fields set in the package configuration override the workspace configuration.  Thus, the lint level for &lt;code&gt;function_missing&lt;&#x2F;code&gt; will be overridden to &lt;code&gt;deny&lt;&#x2F;code&gt;, and the workspace default &lt;code&gt;required-update&lt;&#x2F;code&gt; of &lt;code&gt;minor&lt;&#x2F;code&gt; will be used because it is not configured in the package.  Similarly, the lint level for &lt;code&gt;trait_now_doc_hidden&lt;&#x2F;code&gt; will be the workspace&#x27;s &lt;code&gt;warn&lt;&#x2F;code&gt;, but the required update will be overridden in the package to a &lt;code&gt;major&lt;&#x2F;code&gt; version bump.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limitations&quot;&gt;limitations&lt;&#x2F;h2&gt;
&lt;p&gt;Currently, the configuration can only be read from the new version of the checked crate&#x27;s Cargo.toml.  If this manifest isn&#x27;t used (for example, when using the &lt;code&gt;--current-rustdoc&lt;&#x2F;code&gt; to use a preexisting rustdoc output instead, it is not possible to configure lints.  Configuration through other means (e.g., CLI flags) could be added in the future if there is a strong demand for them.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GSoC Update #1</title>
        <published>2024-07-08T00:00:00+00:00</published>
        <updated>2024-07-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/gsoc-update-1/" type="text/html"/>
        <id>https://blog.mcarr.one/gsoc-update-1/</id>
        
        <content type="html">&lt;p&gt;Hey everyone! It&#x27;s been a little while... Here&#x27;s some updates and reflections on my first few weeks &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
for Google Summer of Code 2024.  &lt;em&gt;(You can read my previous blog posts in the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&#x2F;&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; for an intro to what I&#x27;m doing.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;manifest-configuration&quot;&gt;manifest configuration&lt;&#x2F;h2&gt;
&lt;p&gt;A big feature of my project was to add lint-level configuration in the &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; table of the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest when running &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, and this feature
has been merged into the main repo.  Here&#x27;s an example of what you can do now:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;refresher: &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; runs checks (lints) between versions of a library crate to make sure a new release is following &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html&quot;&gt;semantic versioning guarantees&lt;&#x2F;a&gt;.
For example, the &lt;code&gt;function_missing&lt;&#x2F;code&gt; lint checks whether a &lt;code&gt;pub&lt;&#x2F;code&gt; function has been removed (or renamed) in the current version, which, by default, requires a new &lt;em&gt;major&lt;&#x2F;em&gt; version release.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks.lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_missing &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;module_missing &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enum_missing &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lint-level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required-update &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_missing &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this configuration, users can now configure the &lt;em&gt;required semver update&lt;&#x2F;em&gt; (&lt;code&gt;major&lt;&#x2F;code&gt; or &lt;code&gt;minor&lt;&#x2F;code&gt;) and &lt;em&gt;level of severity&lt;&#x2F;em&gt; (&lt;code&gt;deny&lt;&#x2F;code&gt;, &lt;code&gt;warn&lt;&#x2F;code&gt;, &lt;code&gt;allow&lt;&#x2F;code&gt;) for any given check.&lt;&#x2F;p&gt;
&lt;p&gt;Why might this be useful? Say a library has different policies than the semver guidelines for one check, for example changing the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;blob&#x2F;main&#x2F;src&#x2F;lints&#x2F;function_changed_abi.ron&quot;&gt;ABI of a function&lt;&#x2F;a&gt;.  If the library only considers this a minor-level change, versus &lt;code&gt;cargo&lt;&#x2F;code&gt; guidelines&#x27; major, they couldn&#x27;t integrate &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; (e.g., into CI) without much difficulty because this check would not have the right behavior for this specific library&#x27;s needs.  In doing so, they miss out on checking the other &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&#x2F;tree&#x2F;main&#x2F;src&#x2F;lints&quot;&gt;70+ checks&lt;&#x2F;a&gt; just because of this one discrepancy, which could easily lead to other semantic versioning violations because, as &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; shows, computers are very good at checking these sorts of things automatically.&lt;&#x2F;p&gt;
&lt;p&gt;Now, the library could simply add &lt;code&gt;function_changed_abi = &amp;quot;minor&amp;quot;&lt;&#x2F;code&gt; to their Cargo.toml in the &lt;code&gt;[package.metadata.cargo-semver-checks.lints]&lt;&#x2F;code&gt; table and be able to configure, run, and integrate &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; into their versioning workflows.  This helps prevent semantic versioning violations, which lets dependent crates and the whole Rust ecosystem more confidently use libraries and upgrade safely to get bug fixes and enhancements without breaking their existing code using the guarantees of semver.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, by adding warnings and lint levels, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can now run checks on code that don&#x27;t necessarily &lt;em&gt;require&lt;&#x2F;em&gt; a new version bump.  With this, we can create new &lt;code&gt;warn&lt;&#x2F;code&gt;-by-default lints that check suspicious code: changes that are not necessarily semantic versioning violations, but suggest that there could be a (more complicated) error that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; can&#x27;t check with 100% certainty yet.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;workspace-configuration&quot;&gt;workspace configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Additionally, I added the ability to configure the lints at the package and the workspace level.  By adding the similar &lt;code&gt;[workspace.metadata.cargo-semver-checks.lints]&lt;&#x2F;code&gt; table, libraries can configure defaults for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; for all packages in a Cargo workspace, and then override in &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; for individual crates if need be.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;what&#x27;s next?&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the things I&#x27;m going to be working on after this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;testing testing testing&lt;&#x2F;strong&gt;: there are lots of edge cases and tricky situations that came up while adding these features, and I want to make sure that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; has the expected behavior in these cases, so I will add even more unit&#x2F;integration tests to our test suite.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;documentation&#x2F;migration guide&lt;&#x2F;strong&gt;: with a big new feature like this, we need lots of documentation for both users of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as a Rust library and as a binary tool, so I&#x27;m going to write even more on how people can use the new configuration in their own projects and code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;clean up CLI output&lt;&#x2F;strong&gt;: in adding warnings, there were definitely areas for incremental improvement in how &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; displays this information to the user, so I&#x27;m going to work on improving it and making it more consistent.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;other features&lt;&#x2F;strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;CLI flags&lt;&#x2F;em&gt;: the ability to pass &lt;code&gt;--warn function_missing&lt;&#x2F;code&gt;, &lt;code&gt;--minor module_missing&lt;&#x2F;code&gt;, and like configuration to the &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; binary instead of&#x2F;in addition to configuration in the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;lint groups&lt;&#x2F;em&gt;: the ability to configure multiple related lints at once (like in tools like &lt;code&gt;clippy&lt;&#x2F;code&gt;), for example a &lt;code&gt;suspicious&lt;&#x2F;code&gt; group of warn-by-default lints.&lt;&#x2F;li&gt;
&lt;li&gt;more features? What do you think is important for this tool to have? I&#x27;d love to hear what you think, in this blog&#x27;s GitHub issue or on the project&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;421156-gsoc&#x2F;topic&#x2F;Project.3A.20Adding.20lint.20configuration.20to.20cargo-semver-checks&quot;&gt;Zulip stream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reflections&quot;&gt;reflections&lt;&#x2F;h2&gt;
&lt;p&gt;I can&#x27;t give enough thanks to my GSoC mentor Predrag Gruevski, who has given endless helpful and insightful feedback on all of my changes, thinking of areas and use-cases that are so important to consider.  Additionally, I&#x27;ve been working on my git hygiene, breaking up pull requests into as small as possible to be easier to review and make sure they are correct (sorry again for the first massive one, hehe).  Additionally, it&#x27;s been so fun seeing the progress so far on the other GSoC projects and the support of the Rust community as a whole.  Happy coding!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Although the coding period of GSoC has been on for more than a few weeks, my school ends later than typical, so we basically pushed back the start and end dates for me.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How do Rust tools handle lint configuration?</title>
        <published>2024-05-27T00:00:00+00:00</published>
        <updated>2024-05-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/rust-lint-config/" type="text/html"/>
        <id>https://blog.mcarr.one/rust-lint-config/</id>
        
        <content type="html">&lt;p&gt;As I start to work on &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;&quot;&gt;adding more lint configuration&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, I&#x27;ve been exploring the different ways that tools like &lt;code&gt;rustc&lt;&#x2F;code&gt;, &lt;code&gt;clippy&lt;&#x2F;code&gt;, and &lt;code&gt;cargo&lt;&#x2F;code&gt; handle linting and configuring the levels of each of their lints to make it more consistent for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&#x27;s configuration.
Some of it is internal compiler code that we can&#x27;t really reuse, but there are crates like &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;annotate_snippets&quot;&gt;&lt;code&gt;annotate-snippets&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; are being developed to make it easier and more consistent to create linting tools (in this case, by providing an interface to render diagnostics).
We can also copy&#x2F;take inspiration from the interfaces (e.g., command-line flags) of rustc and clippy to make configuration more consistent.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lint-levels&quot;&gt;lint levels&lt;&#x2F;h1&gt;
&lt;p&gt;The biggest part of configuring lints is to specify how big a problem it is when this lint occurs. If we should raise an error, that&#x27;s &lt;code&gt;deny&lt;&#x2F;code&gt;. If it should just be a warning: aptly &lt;code&gt;warn&lt;&#x2F;code&gt;. And if, through our configuration or the default configuration, it should not error or raise a warning when this lint is triggered, we &lt;code&gt;allow&lt;&#x2F;code&gt; that lint.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-secret-fourth-option&quot;&gt;a secret fourth option&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s another option in &lt;code&gt;rustc&lt;&#x2F;code&gt;, though, that is even stricter. If we &lt;code&gt;forbid&lt;&#x2F;code&gt; a lint, it&#x27;s like a stricter version of &lt;code&gt;deny&lt;&#x2F;code&gt;ing it. There are a &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;rust-lint-config&#x2F;#configuration&quot;&gt;lot of ways&lt;&#x2F;a&gt; to configure lints tools like &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;clippy&lt;&#x2F;code&gt;, and sometimes you &lt;code&gt;deny&lt;&#x2F;code&gt; a lint (such as the &lt;code&gt;unsafe-code&lt;&#x2F;code&gt; lint) at the module level, for example, but you can still &lt;code&gt;allow&lt;&#x2F;code&gt; or &lt;code&gt;warn&lt;&#x2F;code&gt; an individual &lt;code&gt;unsafe&lt;&#x2F;code&gt; block. If we want to prevent this from happening, we can &lt;code&gt;#![forbid(unsafe_code)]&lt;&#x2F;code&gt;, and this lint will now &lt;em&gt;always&lt;&#x2F;em&gt; be an error, regardless&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#forbid&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of other configuration that would otherwise override a &lt;code&gt;deny&lt;&#x2F;code&gt; level.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-fifth-one&quot;&gt;a fifth one?&lt;&#x2F;h2&gt;
&lt;p&gt;This one was actually new to me when I was reading the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;lints&#x2F;levels.html&quot;&gt;rustc lints page&lt;&#x2F;a&gt;. Similar to &lt;code&gt;forbid&lt;&#x2F;code&gt;, there is a &lt;code&gt;force-warn&lt;&#x2F;code&gt; level that will always make a lint emit a warning, even if it is configured to be &lt;code&gt;allow&lt;&#x2F;code&gt; &lt;em&gt;or&lt;&#x2F;em&gt; &lt;code&gt;deny&lt;&#x2F;code&gt; at a higher-precedence config. Unlike &lt;code&gt;forbid&lt;&#x2F;code&gt;, though, &lt;code&gt;force-warn&lt;&#x2F;code&gt; can&#x27;t even be suppressed by &lt;code&gt;--cap-lints allow&lt;&#x2F;code&gt;. However, it can&#x27;t be set by an attribute like the other ones, and I personally have not seen it used in the wild yet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;looking-at-cargo-semver-checks&quot;&gt;looking at &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first three are unambiguously necessary to add to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to me, as the whole point of adding this more granular configuration to be able to specify the level of each check.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d love feedback on &lt;code&gt;forbid&lt;&#x2F;code&gt;, though. It requires special handling (to be able to override later configuration on the same lint), and right now, the initial plan is to only add three places to configure the lint: workspace and package &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; as well as through CLI flags, so adding it might not be as necessary as in &lt;code&gt;rustc&lt;&#x2F;code&gt;, where every module and submodule and item and field can have their own configuration, so it&#x27;s a lot more helpful to be able to override something at an outer level.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, if we do add module-level lint configuration, it might be helpful to have &lt;code&gt;forbid&lt;&#x2F;code&gt;, and as a Rust&#x2F;cargo tool, users might expect to be able to forbid a lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; as in other tools.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any thoughts on this, I&#x27;d love to hear what you think! Feel free to post on the blog &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;suaviloquence&#x2F;blog&#x2F;issues&#x2F;3&quot;&gt;GitHub issue&lt;&#x2F;a&gt; or in the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;421156-gsoc&#x2F;topic&#x2F;Project.3A.20Adding.20lint.20configuration.20to.20cargo-semver-checks&quot;&gt;project Zulip stream&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As for &lt;code&gt;force-warn&lt;&#x2F;code&gt;, I personally would need some convincing to see why it would be useful to add to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, as I haven&#x27;t even seen it used in &lt;code&gt;rustc&lt;&#x2F;code&gt; lints yet (that I know of).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configuration&quot;&gt;configuration&lt;&#x2F;h1&gt;
&lt;p&gt;The point of these lint levels is to be able to set them, of course, and there are so many different ways to configure them in the ecosystem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cli-flags&quot;&gt;cli flags&lt;&#x2F;h2&gt;
&lt;p&gt;rustc (and clippy, which uses rustc&#x27;s interface) let the user pass &lt;code&gt;--allow&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-A&lt;&#x2F;code&gt;, &lt;code&gt;--warn&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-W&lt;&#x2F;code&gt;, &lt;code&gt;--force-warn&lt;&#x2F;code&gt;, &lt;code&gt;--deny&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-D&lt;&#x2F;code&gt;, &lt;code&gt;--forbid&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;-F&lt;&#x2F;code&gt; with the qualified lint name (e.g., &lt;code&gt;clippy::absurd_extreme_comparisons&lt;&#x2F;code&gt; or &lt;code&gt;dead_code&lt;&#x2F;code&gt; == &lt;code&gt;rust::dead_code&lt;&#x2F;code&gt;) to set the lint level at the scope of the compile target. Ideally, a user of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; would be able to do this for our checks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;note: for rustc-registered lints, these can also be passed to &lt;code&gt;RUSTFLAGS&lt;&#x2F;code&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-toml-tables&quot;&gt;Cargo.toml tables&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;3389-manifest-lint.html&quot;&gt;&lt;code&gt;[lints]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;cargo&#x2F;reference&#x2F;manifest.html#the-lints-section&quot;&gt;cargo book&lt;&#x2F;a&gt;) table in the Cargo manifest was added to declare package or workspace-scope lint levels. Currently, this only works with &lt;code&gt;rust&lt;&#x2F;code&gt;, &lt;code&gt;clippy&lt;&#x2F;code&gt;, and &lt;code&gt;rustdoc&lt;&#x2F;code&gt; lints, so &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; would not be able to use it as of yet. However, we can simulate the syntax in a &lt;code&gt;[{package,workspace}.metadata]&lt;&#x2F;code&gt; subtable until it is stable for third-party tools to have entries in the lints table.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;module-item-attributes&quot;&gt;module&#x2F;item attributes&lt;&#x2F;h2&gt;
&lt;p&gt;For rustc lints, you can add configuration like &lt;code&gt;#![allow(lint)]&lt;&#x2F;code&gt; outer attribute to a module as well as attributes like &lt;code&gt;#[warn(lint)]&lt;&#x2F;code&gt; on an inner item itself to apply that configuration to just the module&#x2F;item. Currently, &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; has a less granular version of this by adding &lt;span class=&quot;nobr&quot;&gt;&lt;code&gt;#[doc(hidden)]&lt;&#x2F;code&gt;&lt;&#x2F;span&gt; to an item to exempt it from semver guarantees, but adding this is a breaking change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lint-groups&quot;&gt;lint groups&lt;&#x2F;h2&gt;
&lt;p&gt;Lints in rustc and clippy are organized into groups&#x2F;collections of lints that can all be configured at once (e.g., &lt;code&gt;#[warn(clippy::pedantic)]&lt;&#x2F;code&gt;). It&#x27;s definitely a goal of &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to implement this as well, for instance with a &lt;code&gt;suspicious&lt;&#x2F;code&gt; group of warn-by-default lints that are not necessarily breaking changes at all times, but usually indicate breakage of a semver guarantee somewhere.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;precedence&quot;&gt;precedence&lt;&#x2F;h2&gt;
&lt;p&gt;When there are multiple levels set for a given lint, we have to figure out which one takes priority, which can get complicated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;later CLI flags take priority over earlier CLI flags (&lt;code&gt;--deny clippy::cast_sign_loss --allow clippy::pedantic --warn clippy::cast_possible_truncation&lt;&#x2F;code&gt;) would make &lt;code&gt;cast_possible_truncation&lt;&#x2F;code&gt; warn, but &lt;code&gt;cast_sign_loss&lt;&#x2F;code&gt; allow (both lints are in the &lt;code&gt;pedantic&lt;&#x2F;code&gt; group).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table has a &lt;code&gt;priority&lt;&#x2F;code&gt; key for each entry, such that lower is a lower priority, and higher higher (default is zero if not set). Because in TOML key order is not guaranteed, the order of the lints in the lint table should not be used for configuration, and users should set &lt;code&gt;priority&lt;&#x2F;code&gt; instead if there is a conflict.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt; uses a stack of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;f00b02e6bbe63707503f058fb87cc3e2b25991ac&#x2F;compiler&#x2F;rustc_lint&#x2F;src&#x2F;levels.rs#L75&quot;&gt;&lt;code&gt;LintSet&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;s, based on how deep the scope is where the configuration is added (i.e., an item is on the top of the stack, its module is in the middle, and command line flags are at the bottom of the stack)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;CLI flags override the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;test for this&lt;&#x2F;summary&gt;
&lt;p&gt;Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;[lints]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;unused_variables &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;deny&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;main.rs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;$ cargo clippy&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo clippy
&lt;&#x2F;span&gt;&lt;span&gt;    Checking tst v0.1.0 (&#x2F;tmp&#x2F;tst)
&lt;&#x2F;span&gt;&lt;span&gt;error: unused variable: `a`
&lt;&#x2F;span&gt;&lt;span&gt; --&amp;gt; src&#x2F;main.rs:2:9
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;2 |     let a = 0;
&lt;&#x2F;span&gt;&lt;span&gt;  |         ^ help: if this is intentional, prefix it with an underscore: `_a`
&lt;&#x2F;span&gt;&lt;span&gt;  |
&lt;&#x2F;span&gt;&lt;span&gt;  = note: requested on the command line with `-D unused-variables`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error: could not compile `tst` (bin &amp;quot;tst&amp;quot;) due to 1 previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;$ cargo clippy -- -Aunused_variables&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Checking tst v0.1.0 (&#x2F;tmp&#x2F;tst)
&lt;&#x2F;span&gt;&lt;span&gt;Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.05s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;and of course, if &lt;code&gt;forbid&lt;&#x2F;code&gt; is found at any point, it overrides any other configuration&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Looking at &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, we would need to calculate this precedence ourselves, at least right now. However, it seems like we would just need to worry about CLI flags, package tables, and workspace tables, and potentially &lt;code&gt;forbid&lt;&#x2F;code&gt;, as you can&#x27;t annotate an item or module. Additionally, we want to be able to configure the &lt;em&gt;required semver version bump&lt;&#x2F;em&gt; as well as the lint level. There is the future possibility of configuring this (i.e., tool-specified configuration) in the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table, such as &lt;code&gt;enum_missing = { level = &amp;quot;warn&amp;quot;, semver = &amp;quot;minor&amp;quot; }&lt;&#x2F;code&gt;, but this functionality is not available in the &lt;code&gt;[lints]&lt;&#x2F;code&gt; table yet. However, we can add it to our own &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; table, then integrate with &lt;code&gt;[lints]&lt;&#x2F;code&gt; when we can. However, we would need our own way to configure this at the command line, as there&#x27;s little precedent for providing arguments to lints in tools like clippy.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;consistency&quot;&gt;consistency&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;annotate-snippets&quot;&gt;annotate-snippets&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;annotate_snippets&quot;&gt;&lt;code&gt;annotate-snippets&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a crate that creates &lt;code&gt;rustc&lt;&#x2F;code&gt;-like formatted diagnostics for code. You can provide it with level, text, and attach other related diagnostics to the error message.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;&#x27;s linting tool is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;95eeafa3ba513a630d32aecf2818734aeb06b540&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L6&quot;&gt;currently using it&lt;&#x2F;a&gt;, but tools like &lt;code&gt;rustc&lt;&#x2F;code&gt; and &lt;code&gt;clippy&lt;&#x2F;code&gt; are using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;nightly-rustc&#x2F;rustc_errors&#x2F;struct.DiagCtxt.html&quot;&gt;rustc-internal diagnostic rendering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiler-lints&quot;&gt;compiler lints&lt;&#x2F;h2&gt;
&lt;p&gt;Tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; register with &lt;code&gt;rustc&lt;&#x2F;code&gt;&#x27;s linter using &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;nightly-rustc&#x2F;rustc_lint_defs&#x2F;macro.declare_tool_lint.html&quot;&gt;&lt;code&gt;declare_tool_lint!&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;code&gt;rustc&lt;&#x2F;code&gt; then handles configuration of lint levels and running the lints as necessary, and the tools define the behavior.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cargo-lints&quot;&gt;cargo lints&lt;&#x2F;h2&gt;
&lt;p&gt;When lints have to run over a crate (including a &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; manifest), it makes less sense to use &lt;code&gt;rustc&lt;&#x2F;code&gt;&#x27;s lint handling. cargo&#x27;s linting is relatively new, and it seems to roll its own configuration, at least for now. (see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;master&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L263&quot;&gt;&lt;code&gt;struct Lint&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;blob&#x2F;95eeafa3ba513a630d32aecf2818734aeb06b540&#x2F;src&#x2F;cargo&#x2F;util&#x2F;lints.rs#L386&quot;&gt;&lt;code&gt;level_priority&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consequences-for-cargo-semver-checks&quot;&gt;consequences for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The lints in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; are much closer to cargo&#x27;s than those of rustc and clippy&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#clippy-cargo&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Because we need access to the whole API of a crate (and a comparison baseline version of that crate), it doesn&#x27;t seem very feasible to use compiler lints.&lt;&#x2F;p&gt;
&lt;p&gt;What &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; does differently than other tools is that lints are created &lt;em&gt;declaratively&lt;&#x2F;em&gt; with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; query over the crate&#x27;s API, instead of as a Rust constant. This means that once&#x2F;if cargo exposes the functionality for third-party crates to register cargo lints, it may not be plug-and-play (especially if it expects something with a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime, as we need to parse them at runtime).&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not sure how well we can integrate with cargo lints right now, and it seems like I will have to write my own level precedence calculator. However, we definitely want to design to integrate with cargo in the future, and if you have any suggestions for how to do that, I&#x27;d love to hear them. Additionally, maintaining interface (like CLI) compatibility with tools like rustc is also a goal as much as we can, even if we don&#x27;t use the same lint mechanisms under the hood.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;acknowledgements&quot;&gt;acknowledgements&lt;&#x2F;h1&gt;
&lt;p&gt;Thanks to Ed Page, Scott Schafer, and Predrag Gruevski for great info and pointers, especially about &lt;code&gt;annotate-snippets&lt;&#x2F;code&gt; and cargo&#x27;s linting in the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;421156-gsoc&#x2F;topic&#x2F;Project.3A.20Adding.20lint.20configuration.20to.20cargo-semver-checks&quot;&gt;Zulip thread&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Again, I&#x27;d love to hear any feedback, either in the Zulip, as a comment on the GitHub issue for this post, or by email.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;forbid&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;In &lt;code&gt;rustc&lt;&#x2F;code&gt;, you can pass &lt;code&gt;--cap-lints [level]&lt;&#x2F;code&gt; and it will suppress all lints at a stricter level by capping them to the passed level. This makes even something with &lt;code&gt;forbid&lt;&#x2F;code&gt; an &lt;code&gt;allow&lt;&#x2F;code&gt; or &lt;code&gt;warn&lt;&#x2F;code&gt; if capped.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;clippy-cargo&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Although &lt;code&gt;clippy&lt;&#x2F;code&gt; has cargo integration and lints parts of Cargo.toml as well; see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;76eee82e79e736c4cef6ee9f755f58e752b9f58a&#x2F;clippy_lints&#x2F;src&#x2F;cargo&#x2F;mod.rs&quot;&gt;&lt;code&gt;cargo&#x2F;mod.rs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (it makes a &lt;code&gt;Cargo&lt;&#x2F;code&gt; lint pass, and calls &lt;code&gt;cargo metadata&lt;&#x2F;code&gt; - we could technically do this for &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;, but we would need a lot of refactoring, and it would be a little hacky)&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GSoC &#x27;24 Intro</title>
        <published>2024-05-07T00:00:00+00:00</published>
        <updated>2024-05-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.mcarr.one/gsoc-24-intro/" type="text/html"/>
        <id>https://blog.mcarr.one/gsoc-24-intro/</id>
        
        <content type="html">&lt;p&gt;I&#x27;m super excited to be working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; this summer! I&#x27;ll be posting updates here under the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; as I work on it this summer. I love the philosophy of the tool and I think it&#x27;s a great example of the ideas of the Rust language and ecosystem that let people make correct code more easily.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;semantic-versioning-and-cargo-semver-checks-what-am-i-working-on&quot;&gt;semantic versioning and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;: what am i working on?&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;this is a little introduction to the problem that &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; tries to solve, and how it solves it. if you&#x27;re already familiar with the project, feel free to jump to the &lt;a href=&quot;https:&#x2F;&#x2F;blog.mcarr.one&#x2F;gsoc-24-intro&#x2F;#planned-work&quot;&gt;planned work&lt;&#x2F;a&gt; section.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I can tell my friends and family that I&#x27;m &amp;quot;adding lint-level configuration to &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;,&amp;quot; but judging by the blank stares I get, that doesn&#x27;t make it any clearer what I&#x27;m actually working on. However, we all, even non-programmers, have some experience with the problems that semantic versioning and &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; try to solve:&lt;&#x2F;p&gt;
&lt;p&gt;Have you ever updated an app on your phone only to open it and find out that they, for whatever reason, removed a feature you used to use? It probably broke your workflow, and there probably was little to no warning whenn you went to update the app that this would happen. This is essentially the problem that semantic versioning works to solve.&lt;&#x2F;p&gt;
&lt;p&gt;With a piece of software that uses semantic versioning (shortened form: semver), its software version takes the form &lt;code&gt;x.y.z&lt;&#x2F;code&gt;, where &lt;code&gt;x&lt;&#x2F;code&gt; is the &lt;em&gt;major&lt;&#x2F;em&gt; version number, &lt;code&gt;y&lt;&#x2F;code&gt; is the &lt;em&gt;minor&lt;&#x2F;em&gt; version number, and &lt;code&gt;z&lt;&#x2F;code&gt; is the &lt;em&gt;patch&lt;&#x2F;em&gt; number. Take an application &lt;code&gt;cat-petter&lt;&#x2F;code&gt; with version &lt;code&gt;1.5.2&lt;&#x2F;code&gt;. If the developers just fixed bugs or added minor improvements, they can just bump the &lt;em&gt;patch&lt;&#x2F;em&gt; version and release &lt;code&gt;1.5.3&lt;&#x2F;code&gt;, and users of this app will know that they can upgrade from 1.5.2 to 1.5.3 without any breaking changes. However, let&#x27;s say the developers add a feature to pet &lt;em&gt;all&lt;&#x2F;em&gt; pets in a way that &lt;em&gt;doesn&#x27;t break&lt;&#x2F;em&gt; the original workflow of petting cats (here&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#fn-generalize-compatible&quot;&gt;rust analog: generalizing a function&lt;&#x2F;a&gt;), they should bump the &lt;em&gt;minor&lt;&#x2F;em&gt; version to show that this feature was added to version &lt;code&gt;1.6.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to note that this only applies if it doesn&#x27;t make the original use-case in 1.5.2 stop working. Say for example, that the developers wanted (for some reason) to make &lt;code&gt;cat-sitter&lt;&#x2F;code&gt; pet dogs instead of cats. This new version of the app would break for someone using 1.5.2, so they should release version &lt;code&gt;2.0.0&lt;&#x2F;code&gt;, bumping the major version number, to show this.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, you, the user of the app, can see the version change when you go to update the app. If it&#x27;s just a patch bump, the contract of semantic versioning assures you that you can update it without breaking your workflow. If it&#x27;s a minor version bump, you will know that some new features were added, but it &lt;em&gt;generally&lt;&#x2F;em&gt; will still work the way you used to use it.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; If it&#x27;s a major version bump, though, you know that there is the possibility to break your workflow, so you should be careful and research your decision to upgrade.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-cargo-semver-checks&quot;&gt;enter &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There&#x27;s one problem, though: as a developer, keeping track of all these changes is &lt;em&gt;hard&lt;&#x2F;em&gt;. For Rust library crate developers, there&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html&quot;&gt;cargo guide&lt;&#x2F;a&gt; on minor and major-breaking changes, but it&#x27;s long, and it&#x27;s non-exhaustive. It&#x27;s a lot to keep track of.&lt;&#x2F;p&gt;
&lt;p&gt;Do you know what is good at remembering and keeping track of things given well-defined rules? Computers are. Just like the philosophy of the Rust language is to eliminate entire classes of programming errors by checking your programs at compile time, we can also check for semantic versioning violations when we are ready to release a new version of our library.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks&quot;&gt;&lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a tool that checks library crates for whether they have upheld the semantic versioning guarantees, or whether they need to make a minor or major version bump based on how the library code has changed between versions. It does this by applying lints, one check for each different way that major or minor changes can occur, over the library&#x27;s API surface, using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;trustfall&quot;&gt;Trustfall&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;index.html&quot;&gt;&lt;code&gt;rustdoc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
It&#x27;s a great tool that greatly improves the developer experience, and, by reducing semver violations, builds more trust in the semver guarantees across the whole Rust ecosystem. A library crate can add it to their continues integration tests, and efficiently track whether they have accidentally broken semver before they push the changes.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;planned-work&quot;&gt;planned work: how am i enhancing &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; this summer?&lt;&#x2F;h1&gt;
&lt;p&gt;However, there are lots of reasons, especially for large, mature library crates, why a project can&#x27;t adhere completely to the way &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; interprets the semantic versioning guidelines. For example, one project may not consider it a minor-level change just to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;semver.html#item-new&quot;&gt;add a public item&lt;&#x2F;a&gt;. Currently, this would prevent them from adding &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; to their CI pipeline without a lot of potentially-hacky workarounds. We don&#x27;t want this! All libraries should be able to use this tool without having to agree completely with its default interpretation of the semver spec.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lint-level-configuration&quot;&gt;lint-level configuration&lt;&#x2F;h2&gt;
&lt;p&gt;We want to be able to configure two things about each individual lint in &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt;: whether to &lt;code&gt;allow&lt;&#x2F;code&gt;, &lt;code&gt;warn&lt;&#x2F;code&gt;, or &lt;code&gt;deny&lt;&#x2F;code&gt; (i.e., raise an error) when we detect it, and what semver level (&lt;code&gt;major&lt;&#x2F;code&gt; or &lt;code&gt;minor&lt;&#x2F;code&gt;) is it a breaking change for.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a general outline of what I&#x27;m planning on adding to the tool:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cli-configuration&quot;&gt;CLI configuration&lt;&#x2F;h3&gt;
&lt;p&gt;Like &lt;code&gt;clippy&lt;&#x2F;code&gt; and other linting tools, we want to be able to specify the error and semver levels while running the tool: for example &lt;code&gt;cargo semver-checks [...] -Afunction_export_name_hidden -Dtrait_method_now_hidden=minor -Wrepr_c_removed=minor&lt;&#x2F;code&gt; would make the &lt;code&gt;function_export_name_hidden&lt;&#x2F;code&gt; allowed&#x2F;not error at all, and the &lt;code&gt;trait_method_now_hidden&lt;&#x2F;code&gt; lint now only a minor-version bump, and make the &lt;code&gt;repr_c_removed&lt;&#x2F;code&gt; both a warning and only a minor-breaking change, and all the different permutations of this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-toml-config&quot;&gt;Cargo.toml config&lt;&#x2F;h3&gt;
&lt;p&gt;There is a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;manifest.html#the-lints-section&quot;&gt;&lt;code&gt;[lints]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; table in Cargo.toml, but it&#x27;s not yet available to configure third-party tools like &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; with. As of now, we can make a &lt;code&gt;[package.metadata]&lt;&#x2F;code&gt; section using the same syntax as the lints table, and then move over to that when it&#x27;s stabilized for third-party tools. When this is added, a user will be able to configure &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in their Cargo.toml like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[package.metadata.cargo-semver-checks]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# set the semver level to minor for this lint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;trait_method_now_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# set the semver level to minor and only emit a warning
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# instead of an error on violation for this lint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repr_c_removed &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;level &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;semver &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;minor&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ignore all lints of this type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;function_export_name_hidden &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will also be added to &lt;code&gt;[workspace.metadata]&lt;&#x2F;code&gt; to configure at the workspace level as well.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, I&#x27;ll focus on adding great and thorough tests and documentation to these additions to make &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; even more correct and easy to use and adopt. I&#x27;ll be posting updates at least every week under the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; here to document my progress.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-possibilities&quot;&gt;more possibilities&lt;&#x2F;h2&gt;
&lt;p&gt;This added configuration also opens up some more possibilities I&#x27;ll work on if time allows during the summer or after if needed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add a group of &lt;code&gt;suspicious&lt;&#x2F;code&gt; lints that are not necessarily semver-breaking on their own, but are suspicious; they indicate that something is &lt;em&gt;probably&lt;&#x2F;em&gt; wrong but there is a possibility it does not break semver. These will use the new configuration feature of being &lt;code&gt;warn&lt;&#x2F;code&gt; by default instead of &lt;code&gt;deny&lt;&#x2F;code&gt;, because they are warnings, not errors.&lt;&#x2F;li&gt;
&lt;li&gt;Allow CI targets like GitHub actions be configured directly in the action configuration for lint-level configuration, which will make it even easier and more flexible to use &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; in a CI pipeline&lt;&#x2F;li&gt;
&lt;li&gt;Configure whether to apply a lint on a specific module or even item-level basis, such as with attributes as tools like &lt;code&gt;clippy&lt;&#x2F;code&gt; do&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m super excited to be able to work on &lt;code&gt;cargo-semver-checks&lt;&#x2F;code&gt; this summer and beyond! Feel free to watch the &lt;a href=&quot;&#x2F;tags&#x2F;gsoc24&quot;&gt;&lt;code&gt;gsoc24&lt;&#x2F;code&gt; tag&lt;&#x2F;a&gt; for updates on what I&#x27;m doing. You can also find me on GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;suaviloquence&quot;&gt;@suaviloquence&lt;&#x2F;a&gt; or by email (listed on my GitHub profile).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;footnotes&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;note that this is not always the case: for example, from the cargo semver guide: &lt;em&gt;&amp;quot;Some changes are marked as “minor”, even though they carry the potential risk of breaking a build. This is for situations where the potential is extremely low, and the potentially breaking code is unlikely to be written in idiomatic Rust, or is specifically discouraged from use.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
        
    </entry>
</feed>
